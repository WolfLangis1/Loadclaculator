version: '3.8'

services:
  load-calculator:
    build:
      context: .
      dockerfile: Dockerfile
      # No build arguments to prevent API key exposure in image layers
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      # Feature flags (non-sensitive)
      - USE_REAL_AERIAL_DATA=true
      - AERIAL_PROVIDER=google
      - API_BASE_URL=/api
    secrets:
      - source: google_maps_api_key
        target: /run/secrets/google_maps_api_key
      - source: supabase_url
        target: /run/secrets/supabase_url
      - source: supabase_anon_key
        target: /run/secrets/supabase_anon_key
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    depends_on:
      - api-server

  # Production API server with secrets
  api-server:
    build:
      context: .
      dockerfile: Dockerfile.fullstack
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    secrets:
      - source: google_maps_api_key
        target: /run/secrets/google_maps_api_key
      - source: supabase_url
        target: /run/secrets/supabase_url
      - source: supabase_service_key
        target: /run/secrets/supabase_service_key
      - source: openweather_api_key
        target: /run/secrets/openweather_api_key
      - source: jwt_secret
        target: /run/secrets/jwt_secret
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - app-network
    command: ["npm", "run", "server"]

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - load-calculator
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  # Optional: Add monitoring with Prometheus and Grafana
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - monitoring

networks:
  app-network:
    driver: bridge

volumes:
  nginx-logs:
  prometheus-data:
  grafana-data:

# Docker secrets for production (external secrets must be created before deployment)
secrets:
  google_maps_api_key:
    external: true
    name: load_calculator_google_maps_api_key
  supabase_url:
    external: true
    name: load_calculator_supabase_url
  supabase_anon_key:
    external: true
    name: load_calculator_supabase_anon_key
  supabase_service_key:
    external: true
    name: load_calculator_supabase_service_key
  openweather_api_key:
    external: true
    name: load_calculator_openweather_api_key
  jwt_secret:
    external: true
    name: load_calculator_jwt_secret