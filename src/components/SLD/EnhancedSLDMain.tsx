import React, { useState, useEffect, useCallback } from 'react';
import { useSLD } from '../../context/SLDContext';
import { SLDWireService } from '../../services/sldWireService';
import { SLDNECEngine } from '../../services/sldNECEngine';
import { SLDLoadFlowService } from '../../services/sldLoadFlowService';
import { SLDExportService } from '../../services/sldExportService';
// import { collaborationService } from '../../services/sldCollaborationService';
import { EnhancedSLDCanvas } from './EnhancedSLDCanvas';
import { ComponentLibrary } from './ComponentLibrary';
import { SLDTemplateModal } from './SLDTemplateModal';
import { 
  UndoIcon, 
  RedoIcon, 
  DocumentDuplicateIcon,
  CogIcon,
  ExclamationTriangleIcon,
  CheckCircleIcon,
  UserGroupIcon,
  ArrowPathIcon,
  DocumentArrowDownIcon,
  CalculatorIcon,
  ShieldCheckIcon,
  ChartBarIcon
} from '../UI/SLDIcons';

interface EnhancedSLDMainProps {
  diagramId?: string;
}

export const EnhancedSLDMain: React.FC<EnhancedSLDMainProps> = ({ diagramId }) => {
  const {
    state,
    dispatch,
    executeCommand,
    undo,
    redo,
    canUndo,
    canRedo,
    addComponent,
    removeComponent,
    moveComponent,
    resizeComponent,
    addConnection,
    removeConnection,
    selectElements,
    clearSelection,
    setZoom,
    setPan,
    toggleGrid,
    setGridSize,
    toggleSnapToGrid,
    setPerformanceSettings,
    optimizeRendering,
    validateDiagram,
    clearValidation,
    startCollaboration,
    joinCollaboration,
    leaveCollaboration,
    getCollaborationSession
  } = useSLD();

  const [activeTab, setActiveTab] = useState<'sld' | 'aerial' | 'export' | 'wire-sizing' | 'nec-compliance' | 'load-flow'>('sld');
  const [showTemplateModal, setShowTemplateModal] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [showComponentLibrary, setShowComponentLibrary] = useState(true);
  const [activeTool, setActiveTool] = useState<'select' | 'draw_cable' | 'add_text' | 'pan'>('select');
  const [wireAnalysis, setWireAnalysis] = useState<any>(null);
  const [necCompliance, setNecCompliance] = useState<any>(null);
  const [loadFlowAnalysis, setLoadFlowAnalysis] = useState<any>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [collaborationUsers, setCollaborationUsers] = useState<any[]>([]);
  const [userPresence, setUserPresence] = useState<Map<string, { position: { x: number; y: number }; color: string; lastSeen: Date }>>(new Map());
  const [isCollaborating, setIsCollaborating] = useState(false);

  // Performance monitoring
  const [performanceMetrics, setPerformanceMetrics] = useState({
    renderTime: 0,
    componentCount: 0,
    connectionCount: 0,
    memoryUsage: 0,
    fps: 60
  });

  // Enhanced export options
  const [exportSettings, setExportSettings] = useState({
    includeSpecifications: true,
    includeNECLabels: true,
    includeWireSizing: true,
    includeLoadFlow: false,
    paperSize: 'letter' as 'letter' | 'a4' | 'legal' | 'tabloid',
    orientation: 'landscape' as 'portrait' | 'landscape',
    scale: 1.0,
    backgroundColor: '#ffffff',
    showGrid: false,
    showLayers: true
  });

  // Accessibility improvements
  const [accessibilityMode, setAccessibilityMode] = useState(false);
  const [screenReaderAnnouncements, setScreenReaderAnnouncements] = useState<string[]>([]);

  // Initialize diagram if not exists
  useEffect(() => {
    console.log('EnhancedSLDMain: Checking diagram state:', { hasDiagram: !!state.diagram, diagramId });
    
    if (!state.diagram) {
      // Create a new diagram or load existing one
      const newDiagramId = diagramId || `diagram-${Date.now()}`;
      const defaultDiagram = {
        id: newDiagramId,
        projectId: 'default',
        name: 'New Single Line Diagram',
        systemType: 'grid_tied' as const,
        necCodeYear: '2023' as const,
        version: '1.0',
        created: new Date(),
        lastModified: new Date(),
        components: [],
        connections: [],
        labels: [],
        canvasSize: { width: 1200, height: 800 },
        backgroundColor: '#ffffff',
        autoGenerated: false,
        necCompliant: false,
        necViolations: [],
        requiredLabels: [],
        designedBy: '',
        ahj: '',
        gridEnabled: true,
        snapToGrid: true
      };
      
      console.log('EnhancedSLDMain: Creating default diagram:', defaultDiagram);
      dispatch({ type: 'SET_DIAGRAM', payload: defaultDiagram });
    }
  }, [diagramId, state.diagram, dispatch]);

  // Fallback initialization - ensure diagram is created
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      if (!state.diagram) {
        console.log('EnhancedSLDMain: Fallback - creating diagram after timeout');
        const newDiagramId = diagramId || `diagram-${Date.now()}`;
        const defaultDiagram = {
          id: newDiagramId,
          projectId: 'default',
          name: 'New Single Line Diagram',
          systemType: 'grid_tied' as const,
          necCodeYear: '2023' as const,
          version: '1.0',
          created: new Date(),
          lastModified: new Date(),
          components: [],
          connections: [],
          labels: [],
          canvasSize: { width: 1200, height: 800 },
          backgroundColor: '#ffffff',
          autoGenerated: false,
          necCompliant: false,
          necViolations: [],
          requiredLabels: [],
          designedBy: '',
          ahj: '',
          gridEnabled: true,
          snapToGrid: true
        };
        dispatch({ type: 'SET_DIAGRAM', payload: defaultDiagram });
      }
    }, 1000); // 1 second timeout

    return () => clearTimeout(timeoutId);
  }, [state.diagram, diagramId, dispatch]);

  // Performance optimization
  useEffect(() => {
    if (state.diagram?.components.length) {
      optimizeRendering();
    }
  }, [state.diagram?.components.length, optimizeRendering]);

  // Auto-validation
  useEffect(() => {
    if (state.diagram) {
      const validationResults = validateDiagram();
      dispatch({ type: 'SET_VALIDATION_RESULTS', payload: validationResults });
    }
  }, [state.diagram, validateDiagram, dispatch]);

  // Enhanced collaboration with presence indicators
  useEffect(() => {
    const session = getCollaborationSession();
    if (session) {
      setCollaborationUsers(session.participants);
      setIsCollaborating(true);
      
      // Update user presence
      const presenceMap = new Map();
      session.participants.forEach((user: any) => {
        presenceMap.set(user.id, {
          position: user.cursor || { x: 0, y: 0 },
          color: user.color || '#3b82f6',
          lastSeen: new Date()
        });
      });
      setUserPresence(presenceMap);
    } else {
      setIsCollaborating(false);
      setUserPresence(new Map());
    }
  }, [getCollaborationSession]);

  // Performance monitoring
  useEffect(() => {
    if (state.diagram) {
      const startTime = performance.now();
      
      // Measure render performance
      const measurePerformance = () => {
        const endTime = performance.now();
        const renderTime = endTime - startTime;
        
        setPerformanceMetrics({
          renderTime: Math.round(renderTime),
          componentCount: state.diagram?.components.length || 0,
          connectionCount: state.diagram?.connections.length || 0,
          memoryUsage: Math.round((performance as any).memory?.usedJSHeapSize / 1024 / 1024 || 0),
          fps: Math.round(1000 / renderTime)
        });
      };
      
      // Use requestAnimationFrame for accurate timing
      requestAnimationFrame(measurePerformance);
    }
  }, [state.diagram?.components.length, state.diagram?.connections.length]);

  // Wire sizing analysis
  const analyzeWireSizing = useCallback(async () => {
    if (!state.diagram) return;
    
    setIsAnalyzing(true);
    try {
      const analysis = state.diagram.connections.map(connection => 
        SLDWireService.calculateWireSizing(connection, 50)
      );
      setWireAnalysis(analysis);
    } catch (error) {
      console.error('Wire sizing analysis failed:', error);
    } finally {
      setIsAnalyzing(false);
    }
  }, [state.diagram]);

  // NEC compliance analysis
  const analyzeNECCompliance = useCallback(async () => {
    if (!state.diagram) return;
    
    setIsAnalyzing(true);
    try {
      const compliance = SLDNECEngine.validateDiagram(state.diagram);
      setNecCompliance(compliance);
    } catch (error) {
      console.error('NEC compliance analysis failed:', error);
    } finally {
      setIsAnalyzing(false);
    }
  }, [state.diagram]);

  // Load flow analysis
  const analyzeLoadFlow = useCallback(async () => {
    if (!state.diagram) return;
    
    setIsAnalyzing(true);
    try {
      const analysis = SLDLoadFlowService.analyzeCircuit(state.diagram);
      setLoadFlowAnalysis(analysis);
    } catch (error) {
      console.error('Load flow analysis failed:', error);
    } finally {
      setIsAnalyzing(false);
    }
  }, [state.diagram]);

  // Enhanced export with multiple formats and settings
  const exportDiagram = useCallback(async (format: 'pdf' | 'svg' | 'png' | 'json') => {
    if (!state.diagram) return;
    
    try {
      let result;
      switch (format) {
        case 'pdf':
          result = await SLDExportService.exportToPDF(state.diagram, exportSettings);
          break;
        case 'svg':
          result = await SLDExportService.exportToSVG(state.diagram, exportSettings);
          break;
        case 'png':
          result = await SLDExportService.exportToPNG(state.diagram, exportSettings);
          break;
        case 'json':
          result = SLDExportService.exportToJSON(state.diagram);
          break;
      }
      
      if (result.success) {
        SLDExportService.downloadFile(result);
        
        // Accessibility announcement
        if (accessibilityMode) {
          announceToScreenReader(`Diagram exported successfully as ${format.toUpperCase()}`);
        }
      }
    } catch (error) {
      console.error('Export failed:', error);
      if (accessibilityMode) {
        announceToScreenReader('Export failed. Please try again.');
      }
    }
  }, [state.diagram, exportSettings, accessibilityMode]);

  // Enhanced accessibility features
  const announceToScreenReader = useCallback((message: string) => {
    setScreenReaderAnnouncements(prev => [...prev, message]);
    
    // Create live region for screen readers
    const liveRegion = document.createElement('div');
    liveRegion.setAttribute('aria-live', 'polite');
    liveRegion.setAttribute('aria-atomic', 'true');
    liveRegion.className = 'sr-only';
    liveRegion.textContent = message;
    document.body.appendChild(liveRegion);
    
    // Remove after announcement
    setTimeout(() => {
      document.body.removeChild(liveRegion);
    }, 1000);
  }, []);

  // Enhanced keyboard navigation
  const handleKeyDown = (event: KeyboardEvent) => {
    if (event.target !== document.body) return;
    
    const { key, ctrlKey, shiftKey, altKey } = event;
    
    switch (key) {
      case 'Delete':
      case 'Backspace':
        if (state.selectedElements.length > 0) {
          event.preventDefault();
          state.selectedElements.forEach(id => removeComponent(id));
          announceToScreenReader('Selected components deleted');
        }
        break;
        
      case 'Escape':
        clearSelection();
        announceToScreenReader('Selection cleared');
        break;
        
      case 'a':
        if (ctrlKey) {
          event.preventDefault();
          const allIds = [
            ...state.diagram?.components.map(c => c.id) || [],
            ...state.diagram?.connections.map(c => c.id) || []
          ];
          selectElements(allIds);
          announceToScreenReader(`Selected all ${allIds.length} elements`);
        }
        break;
        
      case 'z':
        if (ctrlKey && !shiftKey) {
          event.preventDefault();
          undo();
          announceToScreenReader('Undo performed');
        } else if (ctrlKey && shiftKey) {
          event.preventDefault();
          redo();
          announceToScreenReader('Redo performed');
        }
        break;
        
      case 's':
        if (ctrlKey) {
          event.preventDefault();
          // Auto-save functionality
          announceToScreenReader('Diagram saved');
        }
        break;
        
      case '=':
      case '+':
        if (ctrlKey) {
          event.preventDefault();
          setZoom(Math.min(state.canvasState.zoom * 1.2, 5));
        }
        break;
        
      case '-':
        if (ctrlKey) {
          event.preventDefault();
          setZoom(Math.max(state.canvasState.zoom / 1.2, 0.1));
        }
        break;
        
      case '0':
        if (ctrlKey) {
          event.preventDefault();
          setZoom(1);
          setPan({ x: 0, y: 0 });
          announceToScreenReader('View reset to default');
        }
        break;
        
      case 'g':
        if (ctrlKey) {
          event.preventDefault();
          toggleGrid();
          announceToScreenReader(`Grid ${state.canvasState.gridEnabled ? 'disabled' : 'enabled'}`);
        }
        break;
        
      case 'Tab':
        if (accessibilityMode) {
          // Enhanced tab navigation for accessibility
          event.preventDefault();
          // Navigate through components in logical order
          announceToScreenReader('Navigating through components');
        }
        break;
    }
  };

  // Collaboration functions
  const startCollaborationSession = useCallback(() => {
    const user = {
      id: 'user_' + Date.now(),
      name: 'Current User',
      email: 'user@example.com',
      color: '#3b82f6',
      isOnline: true,
      lastActivity: new Date()
    };
    startCollaboration(user);
  }, [startCollaboration]);

  const joinCollaborationSession = useCallback((sessionId: string) => {
    const user = {
      id: 'user_' + Date.now(),
      name: 'Current User',
      email: 'user@example.com',
      color: '#3b82f6',
      isOnline: true,
      lastActivity: new Date()
    };
    joinCollaboration(sessionId, user);
  }, [joinCollaboration]);

  // Component library handlers
  const handleComponentSelect = useCallback((template: any) => {
    if (!state.diagram) return;
    
    const newComponent = {
      id: `${template.type}-${Date.now()}`,
      type: template.type,
      name: template.name,
      position: { x: 200, y: 200 },
      size: template.defaultSize,
      rotation: 0,
      labels: [],
      necLabels: [],
      specifications: template.specifications
    };
    
    addComponent(newComponent as any);
  }, [state.diagram, addComponent]);

  const handleComponentDragStart = useCallback((template: any, event: React.DragEvent) => {
    event.dataTransfer.setData('application/json', JSON.stringify(template));
  }, []);

  // Keyboard shortcuts
  useEffect(() => {
    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [handleKeyDown]);

  if (!state.diagram) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading diagram...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* Enhanced Header with Collaboration and Performance */}
      <div className="bg-white border-b border-gray-200 px-4 py-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <h1 className="text-xl font-semibold text-gray-900">Single Line Diagram</h1>
            
            {/* Collaboration Status */}
            {isCollaborating && (
              <div className="flex items-center space-x-2 px-3 py-1 bg-green-100 rounded-full">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                <span className="text-sm text-green-700">
                  {collaborationUsers.length} collaborators online
                </span>
              </div>
            )}
            
            {/* Performance Indicator */}
            {performanceMetrics.componentCount > 50 && (
              <div className="flex items-center space-x-2 px-3 py-1 bg-yellow-100 rounded-full">
                <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                <span className="text-sm text-yellow-700">
                  {performanceMetrics.fps} FPS • {performanceMetrics.memoryUsage}MB
                </span>
              </div>
            )}
          </div>
          
          <div className="flex items-center space-x-2">
            {/* Accessibility Toggle */}
            <button
              onClick={() => setAccessibilityMode(!accessibilityMode)}
              className={`p-2 rounded-lg transition-colors ${
                accessibilityMode 
                  ? 'bg-blue-100 text-blue-700' 
                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
              }`}
              aria-label="Toggle accessibility mode"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
            </button>
            
            {/* Settings */}
            <button
              onClick={() => setShowSettings(!showSettings)}
              className="p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors"
              aria-label="Settings"
            >
              <CogIcon className="w-5 h-5" />
            </button>
          </div>
        </div>
      </div>

      {/* Enhanced Toolbar */}
      <div className="bg-white border-b border-gray-200 px-4 py-2">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            {/* Enhanced Toolbar with more options */}
            <button
              onClick={undo}
              disabled={!canUndo()}
              className="p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              aria-label="Undo"
            >
              <UndoIcon className="w-4 h-4" />
            </button>
            
            <button
              onClick={redo}
              disabled={!canRedo()}
              className="p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              aria-label="Redo"
            >
              <RedoIcon className="w-4 h-4" />
            </button>
            
            <div className="w-px h-6 bg-gray-300"></div>
            
            <button
              onClick={() => setShowTemplateModal(true)}
              className="p-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors"
              aria-label="Templates"
            >
              <DocumentDuplicateIcon className="w-4 h-4" />
            </button>
            
            <button
              onClick={() => validateDiagram()}
              className="p-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition-colors"
              aria-label="Validate diagram"
            >
              <ShieldCheckIcon className="w-4 h-4" />
            </button>
            
            <button
              onClick={() => setShowComponentLibrary(!showComponentLibrary)}
              className={`p-2 rounded-lg transition-colors ${
                showComponentLibrary 
                  ? 'bg-blue-100 text-blue-700' 
                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
              }`}
              aria-label="Toggle component library"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14-7H5m14 14H5" />
              </svg>
            </button>
          </div>
          
          <div className="flex items-center space-x-2">
            {/* Enhanced Export Options */}
            <div className="relative">
              <button
                onClick={() => setActiveTab('export')}
                className="p-2 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 transition-colors"
                aria-label="Export options"
              >
                <DocumentArrowDownIcon className="w-4 h-4" />
              </button>
            </div>
            
            {/* Collaboration */}
            {!isCollaborating && (
              <button
                onClick={() => startCollaboration({ 
                  id: 'user1', 
                  name: 'Current User', 
                  email: 'user@example.com',
                  color: '#3b82f6',
                  isOnline: true,
                  lastActivity: new Date()
                })}
                className="p-2 bg-indigo-100 text-indigo-700 rounded-lg hover:bg-indigo-200 transition-colors"
                aria-label="Start collaboration"
              >
                <UserGroupIcon className="w-4 h-4" />
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="bg-white border-b border-gray-200">
        <nav className="flex space-x-8 px-4">
          {[
            { id: 'sld', label: 'Single Line Diagram', icon: DocumentDuplicateIcon },
            { id: 'aerial', label: 'Aerial View', icon: DocumentDuplicateIcon },
            { id: 'wire-sizing', label: 'Wire Sizing', icon: CalculatorIcon },
            { id: 'nec-compliance', label: 'NEC Compliance', icon: ShieldCheckIcon },
            { id: 'load-flow', label: 'Load Flow', icon: ChartBarIcon },
            { id: 'export', label: 'Export', icon: DocumentArrowDownIcon }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`py-3 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
                activeTab === tab.id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <tab.icon className="h-4 w-4" />
              <span>{tab.label}</span>
            </button>
          ))}
        </nav>
      </div>

      {/* Drawing Tools Toolbar - Only show for SLD tab */}
      {activeTab === 'sld' && (
        <div className="bg-gray-50 border-b border-gray-200 px-4 py-2">
          <div className="flex items-center space-x-1">
            <div className="text-xs font-medium text-gray-500 mr-3">Drawing Tools:</div>
            
            {/* Selection Tool */}
            <button
              onClick={() => setActiveTool('select')}
              className={`p-2 rounded-md transition-colors ${
                activeTool === 'select'
                  ? 'bg-blue-100 text-blue-700'
                  : 'text-gray-600 hover:bg-gray-100'
              }`}
              title="Select Tool (V)"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16l2.879-2.879m0 0a3 3 0 104.243-4.242 3 3 0 00-4.243 4.242zM21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </button>

            {/* Cable Drawing Tool */}
            <button
              onClick={() => setActiveTool('draw_cable')}
              className={`p-2 rounded-md transition-colors ${
                activeTool === 'draw_cable'
                  ? 'bg-green-100 text-green-700'
                  : 'text-gray-600 hover:bg-gray-100'
              }`}
              title="Draw Cable/Wire (C)"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
              </svg>
            </button>

            {/* Text/Annotation Tool */}
            <button
              onClick={() => setActiveTool('add_text')}
              className={`p-2 rounded-md transition-colors ${
                activeTool === 'add_text'
                  ? 'bg-purple-100 text-purple-700'
                  : 'text-gray-600 hover:bg-gray-100'
              }`}
              title="Add Text/Labels (T)"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2h4a1 1 0 011 1v1a1 1 0 01-1 1h-1v12a1 1 0 01-1 1H5a1 1 0 01-1-1V7H3a1 1 0 01-1-1V5a1 1 0 011-1h4z" />
              </svg>
            </button>

            {/* Pan Tool */}
            <button
              onClick={() => setActiveTool('pan')}
              className={`p-2 rounded-md transition-colors ${
                activeTool === 'pan'
                  ? 'bg-orange-100 text-orange-700'
                  : 'text-gray-600 hover:bg-gray-100'
              }`}
              title="Pan View (H)"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16l-4-4m0 0l4-4m-4 4h18" />
              </svg>
            </button>

            <div className="w-px h-6 bg-gray-300 mx-2"></div>

            {/* Delete Tool */}
            <button
              onClick={() => {
                // Delete selected elements
                if (state.selectedElements && state.selectedElements.length > 0 && state.currentDiagram) {
                  const updatedDiagram = {
                    ...state.currentDiagram,
                    components: state.currentDiagram.components?.filter(c => !state.selectedElements.includes(c.id)) || [],
                    connections: state.currentDiagram.connections?.filter(conn => 
                      !state.selectedElements.includes(conn.id) &&
                      !state.selectedElements.includes(conn.fromComponentId) &&
                      !state.selectedElements.includes(conn.toComponentId)
                    ) || [],
                    lastModified: new Date()
                  };
                  // Update the diagram and clear selection
                  dispatch({ type: 'SET_CURRENT_DIAGRAM', payload: updatedDiagram });
                  selectElements([]);
                }
              }}
              disabled={!state.selectedElements || state.selectedElements.length === 0}
              className={`p-2 rounded-md transition-colors ${
                state.selectedElements && state.selectedElements.length > 0
                  ? 'bg-red-100 text-red-700 hover:bg-red-200'
                  : 'text-gray-400 cursor-not-allowed'
              }`}
              title="Delete Selected (Delete/Backspace)"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
            </button>

            <div className="w-px h-6 bg-gray-300 mx-2"></div>

            {/* Wire Drawing Status */}
            {activeTool === 'draw_cable' && (
              <div className="flex items-center space-x-3 text-xs">
                <div className="flex items-center space-x-2">
                  <span className="text-gray-500">Wire Type:</span>
                  <select className="border border-gray-300 rounded px-2 py-1">
                    <option value="ac">AC Power</option>
                    <option value="dc">DC Power</option>
                    <option value="ground">Ground</option>
                    <option value="control">Control</option>
                    <option value="data">Data/Comm</option>
                  </select>
                </div>
                <div className="px-2 py-1 bg-green-100 text-green-800 rounded">
                  💡 Double-click components to connect them
                </div>
              </div>
            )}

            {/* Selection Status */}
            {activeTool === 'select' && state.selectedElements && state.selectedElements.length > 0 && (
              <div className="text-xs px-2 py-1 bg-blue-100 text-blue-800 rounded">
                {state.selectedElements.length} item{state.selectedElements.length > 1 ? 's' : ''} selected
              </div>
            )}

            {/* Rescue Components Button */}
            <button
              onClick={() => {
                // This will trigger the rescue function in the canvas component
                // by simulating a diagram update
                if (state.currentDiagram) {
                  dispatch({ type: 'SET_CURRENT_DIAGRAM', payload: { ...state.currentDiagram } });
                }
              }}
              className="px-3 py-1 text-xs bg-yellow-100 text-yellow-800 rounded hover:bg-yellow-200 transition-colors"
              title="Rescue components that are outside canvas bounds"
            >
              🔧 Rescue Components
            </button>

            <div className="w-px h-6 bg-gray-300 mx-2"></div>

            {/* Zoom Controls */}
            <div className="flex items-center space-x-1">
              <button
                onClick={() => setZoom(Math.min(state.canvasState.zoom * 1.2, 5))}
                className="p-1 text-gray-600 hover:bg-gray-100 rounded"
                title="Zoom In (+)"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                </svg>
              </button>
              <span className="text-xs text-gray-500 px-2">{Math.round(state.canvasState.zoom * 100)}%</span>
              <button
                onClick={() => setZoom(Math.max(state.canvasState.zoom / 1.2, 0.1))}
                className="p-1 text-gray-600 hover:bg-gray-100 rounded"
                title="Zoom Out (-)"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 12H4" />
                </svg>
              </button>
              <button
                onClick={() => { setZoom(1); setPan({ x: 0, y: 0 }); }}
                className="p-1 text-gray-600 hover:bg-gray-100 rounded text-xs"
                title="Fit to View (0)"
              >
                Fit
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Main Content Area */}
      <div className="flex-1 overflow-hidden flex">
        {/* Component Library */}
        {activeTab === 'sld' && showComponentLibrary && (
          <ComponentLibrary
            onComponentSelect={handleComponentSelect}
            onComponentDragStart={handleComponentDragStart}
          />
        )}
        
        {/* Canvas Area */}
        <div className="flex-1 overflow-hidden">
          {activeTab === 'sld' && (
            state.diagram ? (
              <EnhancedSLDCanvas
                diagram={state.diagram}
                onDiagramChange={(diagram) => dispatch({ type: 'SET_DIAGRAM', payload: diagram })}
                readonly={false}
                activeTool={activeTool}
              />
            ) : (
              <div className="flex items-center justify-center h-full bg-gray-50">
                <div className="text-center">
                  <div className="text-gray-400 text-lg mb-2">No diagram loaded</div>
                  <div className="text-gray-500 text-sm">Create a new diagram or load an existing one to get started</div>
                </div>
              </div>
            )
          )}

          {activeTab === 'aerial' && (
            <div className="p-6">
              <h3 className="text-lg font-semibold mb-4">Aerial View</h3>
              <p className="text-gray-600">Aerial view integration coming soon...</p>
            </div>
          )}

          {activeTab === 'wire-sizing' && (
          <div className="p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">Wire Sizing Analysis</h3>
              <button
                onClick={analyzeWireSizing}
                disabled={isAnalyzing}
                className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
              >
                {isAnalyzing ? (
                  <ArrowPathIcon className="h-4 w-4 animate-spin" />
                ) : (
                  <CalculatorIcon className="h-4 w-4" />
                )}
                <span>{isAnalyzing ? 'Analyzing...' : 'Analyze Wire Sizing'}</span>
              </button>
            </div>
            
            {wireAnalysis && (
              <div className="bg-white rounded-lg border border-gray-200 p-4">
                <h4 className="font-medium mb-2">Wire Sizing Results</h4>
                <div className="space-y-2">
                  {wireAnalysis.map((result: any, index: number) => (
                    <div key={index} className="text-sm">
                      <span className="font-medium">Connection {index + 1}:</span>
                      <span className="ml-2">Wire Size: {result.conductorSize}</span>
                      <span className="ml-2">Voltage Drop: {result.voltageDropPercent.toFixed(2)}%</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
          )}

          {activeTab === 'nec-compliance' && (
          <div className="p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">NEC Compliance Analysis</h3>
              <button
                onClick={analyzeNECCompliance}
                disabled={isAnalyzing}
                className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50"
              >
                {isAnalyzing ? (
                  <ArrowPathIcon className="h-4 w-4 animate-spin" />
                ) : (
                  <ShieldCheckIcon className="h-4 w-4" />
                )}
                <span>{isAnalyzing ? 'Analyzing...' : 'Check NEC Compliance'}</span>
              </button>
            </div>
            
            {necCompliance && (
              <div className="bg-white rounded-lg border border-gray-200 p-4">
                <div className="flex items-center space-x-2 mb-4">
                  {necCompliance.overallCompliant ? (
                    <CheckCircleIcon className="h-6 w-6 text-green-500" />
                  ) : (
                    <ExclamationTriangleIcon className="h-6 w-6 text-red-500" />
                  )}
                  <h4 className="font-medium">
                    {necCompliance.overallCompliant ? 'NEC Compliant' : 'NEC Violations Found'}
                  </h4>
                </div>
                
                <div className="space-y-2">
                  <div>Errors: {necCompliance.summary.errors}</div>
                  <div>Warnings: {necCompliance.summary.warnings}</div>
                  <div>Auto-fixable: {necCompliance.summary.autoFixable}</div>
                </div>
                
                {necCompliance.recommendations.length > 0 && (
                  <div className="mt-4">
                    <h5 className="font-medium mb-2">Recommendations:</h5>
                    <ul className="list-disc list-inside space-y-1 text-sm">
                      {necCompliance.recommendations.map((rec: string, index: number) => (
                        <li key={index}>{rec}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            )}
          </div>
          )}

          {activeTab === 'load-flow' && (
          <div className="p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">Load Flow Analysis</h3>
              <button
                onClick={analyzeLoadFlow}
                disabled={isAnalyzing}
                className="flex items-center space-x-2 px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:opacity-50"
              >
                {isAnalyzing ? (
                  <ArrowPathIcon className="h-4 w-4 animate-spin" />
                ) : (
                  <ChartBarIcon className="h-4 w-4" />
                )}
                <span>{isAnalyzing ? 'Analyzing...' : 'Analyze Load Flow'}</span>
              </button>
            </div>
            
            {loadFlowAnalysis && (
              <div className="bg-white rounded-lg border border-gray-200 p-4">
                <div className="grid grid-cols-3 gap-4 mb-4">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-600">
                      {loadFlowAnalysis.efficiency.toFixed(1)}%
                    </div>
                    <div className="text-sm text-gray-600">Overall Efficiency</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-red-600">
                      {loadFlowAnalysis.criticalPaths.length}
                    </div>
                    <div className="text-sm text-gray-600">Critical Paths</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-600">
                      {loadFlowAnalysis.circuitPaths.length}
                    </div>
                    <div className="text-sm text-gray-600">Total Paths</div>
                  </div>
                </div>
                
                {loadFlowAnalysis.recommendations.length > 0 && (
                  <div>
                    <h5 className="font-medium mb-2">Recommendations:</h5>
                    <ul className="list-disc list-inside space-y-1 text-sm">
                      {loadFlowAnalysis.recommendations.map((rec: string, index: number) => (
                        <li key={index}>{rec}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            )}
          </div>
          )}

          {activeTab === 'export' && (
          <div className="p-6">
            <h3 className="text-lg font-semibold mb-4">Export Diagram</h3>
            <div className="grid grid-cols-2 gap-4">
              {[
                { format: 'pdf', label: 'PDF Document', description: 'High-quality print-ready document' },
                { format: 'svg', label: 'SVG Vector', description: 'Scalable vector graphics' },
                { format: 'png', label: 'PNG Image', description: 'High-resolution image' },
                { format: 'json', label: 'JSON Data', description: 'Raw diagram data' }
              ].map((exportOption) => (
                <button
                  key={exportOption.format}
                  onClick={() => exportDiagram(exportOption.format as any)}
                  className="p-4 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 text-left"
                >
                  <div className="font-medium">{exportOption.label}</div>
                  <div className="text-sm text-gray-600">{exportOption.description}</div>
                </button>
              ))}
            </div>
          </div>
          )}
        </div>
      </div>

      {/* Settings Panel */}
      {showSettings && (
        <div className="w-80 bg-white border-l border-gray-200 p-4">
          <h3 className="text-lg font-semibold mb-4">Settings</h3>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Grid Size
              </label>
              <input
                type="range"
                min="10"
                max="50"
                value={state.canvasState.gridSize}
                onChange={(e) => setGridSize(Number(e.target.value))}
                className="w-full"
              />
              <div className="text-sm text-gray-500">{state.canvasState.gridSize}px</div>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Performance Settings
              </label>
              <div className="space-y-2">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={state.performance.virtualRendering}
                    onChange={(e) => setPerformanceSettings({ virtualRendering: e.target.checked })}
                    className="mr-2"
                  />
                  Virtual Rendering
                </label>
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={state.performance.levelOfDetail === 'high'}
                    onChange={(e) => setPerformanceSettings({ levelOfDetail: e.target.checked ? 'high' : 'medium' })}
                    className="mr-2"
                  />
                  High Detail
                </label>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Template Modal */}
      {showTemplateModal && (
        <SLDTemplateModal
          isOpen={showTemplateModal}
          onClose={() => setShowTemplateModal(false)}
          onApplyTemplate={(diagram) => {
            dispatch({ type: 'SET_DIAGRAM', payload: diagram });
            setShowTemplateModal(false);
          }}
        />
      )}
    </div>
  );
};

export default EnhancedSLDMain; 