import React, { useState, useCallback, useRef, useEffect } from 'react';
import { useSLD } from '../../context/SLDContext';
import { ProfessionalSLDCanvas } from './ProfessionalSLDCanvas';
import { ComponentLibrary } from './ComponentLibrary';
import { SLDTemplateModal } from './SLDTemplateModal';
import { ProfessionalGrid, GRID_PRESETS } from './ProfessionalGrid';
import { useCanvasTransform } from '../../hooks/useCanvasTransform';
import { CanvasTransforms } from '../../utils/canvasTransforms';
import type { SLDComponent, SLDConnection } from '../../types/sld';

// Professional toolbar icons
import {
  MousePointer2,
  Move,
  ZoomIn,
  ZoomOut,
  RotateCcw,
  Grid3X3,
  Layers,
  Download,
  Upload,
  Settings,
  Ruler,
  Magnet,
  Eye,
  EyeOff,
  Maximize,
  MoreHorizontal
} from 'lucide-react';

interface ProfessionalSLDMainProps {
  diagramId?: string;
}

type CanvasTool = 'select' | 'pan' | 'zoom' | 'draw_cable' | 'add_text' | 'measure';

interface ViewSettings {
  gridEnabled: boolean;
  gridPreset: keyof typeof GRID_PRESETS;
  snapToGrid: boolean;
  showRulers: boolean;
  showLayers: boolean;
  showMeasurements: boolean;
}

export const ProfessionalSLDMain: React.FC<ProfessionalSLDMainProps> = ({
  diagramId
}) => {
  const { state, dispatch } = useSLD();
  const canvasRef = useRef<HTMLDivElement>(null);
  
  // UI State
  const [activeTool, setActiveTool] = useState<CanvasTool>('select');
  const [showComponentLibrary, setShowComponentLibrary] = useState(true);
  const [showTemplateModal, setShowTemplateModal] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [selectedElements, setSelectedElements] = useState<string[]>([]);
  
  // View settings
  const [viewSettings, setViewSettings] = useState<ViewSettings>({
    gridEnabled: true,
    gridPreset: 'electrical',
    snapToGrid: true,
    showRulers: true,
    showLayers: false,
    showMeasurements: false
  });

  // Canvas transform hook
  const {
    transform,
    zoomTo,
    zoomBy,
    panTo,
    reset: resetView,
    fitToViewport,
    handleWheel,
    handleMouseDown,
    handleMouseMove,
    handleMouseUp,
    getViewBox,
    screenToLogical,
    snapToGrid
  } = useCanvasTransform({
    initialTransform: { x: 0, y: 0, zoom: 1 },
    minZoom: 0.1,
    maxZoom: 10,
    zoomSensitivity: 0.002
  });

  // Initialize diagram if needed
  useEffect(() => {
    if (!state.diagram) {
      const defaultDiagram = {
        id: diagramId || `diagram-${Date.now()}`,
        projectId: 'default',
        name: 'Professional Single Line Diagram',
        systemType: 'grid_tied' as const,
        necCodeYear: '2023' as const,
        version: '1.0',
        created: new Date(),
        lastModified: new Date(),
        components: [],
        connections: [],
        labels: [],
        canvasSize: { width: 1200, height: 800 },
        backgroundColor: '#ffffff',
        autoGenerated: false,
        necCompliant: false,
        necViolations: [],
        requiredLabels: [],
        designedBy: '',
        ahj: '',
        gridEnabled: true,
        snapToGrid: true
      };
      
      dispatch({ type: 'SET_DIAGRAM', payload: defaultDiagram });
    }
  }, [diagramId, state.diagram, dispatch]);

  // Handle component selection from library
  const handleComponentSelect = useCallback((template: any) => {
    if (!state.diagram || activeTool !== 'select') return;

    const newComponent: SLDComponent = {
      id: `component-${Date.now()}`,
      type: template.type,
      name: template.name,
      position: { x: 100, y: 100 }, // Default position
      size: template.defaultSize,
      rotation: 0,
      labels: [],
      necLabels: [],
      specifications: template.specifications,
      ...template.specifications // Spread any type-specific properties
    } as SLDComponent;

    // Add component to diagram
    const updatedDiagram = {
      ...state.diagram,
      components: [...(state.diagram.components || []), newComponent],
      lastModified: new Date()
    };

    dispatch({ type: 'SET_DIAGRAM', payload: updatedDiagram });
  }, [state.diagram, activeTool, dispatch]);

  // Handle component selection on canvas
  const handleCanvasComponentSelect = useCallback((componentIds: string[]) => {
    setSelectedElements(componentIds);
  }, []);

  // Handle connection selection
  const handleCanvasConnectionSelect = useCallback((connectionIds: string[]) => {
    setSelectedElements(connectionIds);
  }, []);

  // Zoom controls
  const handleZoomIn = useCallback(() => {
    zoomBy(0.2);
  }, [zoomBy]);

  const handleZoomOut = useCallback(() => {
    zoomBy(-0.2);
  }, [zoomBy]);

  const handleZoomToFit = useCallback(() => {
    if (!state.diagram?.components || state.diagram.components.length === 0) return;
    
    const bounds = CanvasTransforms.calculateComponentsBounds(
      state.diagram.components.map(c => ({
        position: c.position || { x: 0, y: 0 },
        size: c.size || { width: 60, height: 40 }
      }))
    );

    const containerSize = canvasRef.current 
      ? { width: canvasRef.current.offsetWidth, height: canvasRef.current.offsetHeight }
      : { width: 1200, height: 800 };

    fitToViewport(bounds, containerSize, 100);
  }, [state.diagram?.components, fitToViewport]);

  // Grid settings
  const handleGridToggle = useCallback(() => {
    setViewSettings(prev => ({ ...prev, gridEnabled: !prev.gridEnabled }));
  }, []);

  const handleGridPresetChange = useCallback((preset: keyof typeof GRID_PRESETS) => {
    setViewSettings(prev => ({ ...prev, gridPreset: preset }));
  }, []);

  const handleSnapToggle = useCallback(() => {
    setViewSettings(prev => ({ ...prev, snapToGrid: !prev.snapToGrid }));
  }, []);

  // Get current container size for viewBox calculation
  const containerSize = canvasRef.current 
    ? { width: canvasRef.current.offsetWidth, height: canvasRef.current.offsetHeight }
    : { width: 1200, height: 800 };

  const viewBox = getViewBox(containerSize);

  if (!state.diagram) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-gray-500">Loading diagram...</div>
      </div>
    );
  }

  return (
    <div className="flex h-full bg-gray-50">
      {/* Component Library Sidebar */}
      {showComponentLibrary && (
        <div className="w-80 bg-white border-r border-gray-200 overflow-y-auto">
          <div className="p-4 border-b border-gray-200">
            <h2 className="text-lg font-semibold text-gray-900">Component Library</h2>
            <p className="text-sm text-gray-600">Professional electrical symbols</p>
          </div>
          <ComponentLibrary
            onComponentSelect={handleComponentSelect}
          />
        </div>
      )}

      {/* Main Canvas Area */}
      <div className="flex-1 flex flex-col">
        {/* Professional Toolbar */}
        <div className="bg-white border-b border-gray-200 px-4 py-2">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              {/* Tool Selection */}
              <div className="flex items-center space-x-1 bg-gray-100 rounded-lg p-1">
                <button
                  onClick={() => setActiveTool('select')}
                  className={`p-2 rounded ${activeTool === 'select' ? 'bg-blue-500 text-white' : 'hover:bg-gray-200'}`}
                  title="Select Tool (V)"
                >
                  <MousePointer2 size={18} />
                </button>
                <button
                  onClick={() => setActiveTool('pan')}
                  className={`p-2 rounded ${activeTool === 'pan' ? 'bg-blue-500 text-white' : 'hover:bg-gray-200'}`}
                  title="Pan Tool (H)"
                >
                  <Move size={18} />
                </button>
                <button
                  onClick={() => setActiveTool('zoom')}
                  className={`p-2 rounded ${activeTool === 'zoom' ? 'bg-blue-500 text-white' : 'hover:bg-gray-200'}`}
                  title="Zoom Tool (Z)"
                >
                  <ZoomIn size={18} />
                </button>
                <button
                  onClick={() => setActiveTool('measure')}
                  className={`p-2 rounded ${activeTool === 'measure' ? 'bg-blue-500 text-white' : 'hover:bg-gray-200'}`}
                  title="Measure Tool (M)"
                >
                  <Ruler size={18} />
                </button>
              </div>

              {/* Zoom Controls */}
              <div className="flex items-center space-x-1 bg-gray-100 rounded-lg p-1">
                <button
                  onClick={handleZoomOut}
                  className="p-2 hover:bg-gray-200 rounded"
                  title="Zoom Out (-)"
                >
                  <ZoomOut size={18} />
                </button>
                <span className="px-3 py-1 text-sm font-medium text-gray-700 min-w-[60px] text-center">
                  {Math.round(transform.zoom * 100)}%
                </span>
                <button
                  onClick={handleZoomIn}
                  className="p-2 hover:bg-gray-200 rounded"
                  title="Zoom In (+)"
                >
                  <ZoomIn size={18} />
                </button>
                <button
                  onClick={handleZoomToFit}
                  className="p-2 hover:bg-gray-200 rounded"
                  title="Zoom to Fit (Ctrl+0)"
                >
                  <Maximize size={18} />
                </button>
                <button
                  onClick={resetView}
                  className="p-2 hover:bg-gray-200 rounded"
                  title="Reset View (Ctrl+R)"
                >
                  <RotateCcw size={18} />
                </button>
              </div>

              {/* View Controls */}
              <div className="flex items-center space-x-1 bg-gray-100 rounded-lg p-1">
                <button
                  onClick={handleGridToggle}
                  className={`p-2 rounded ${viewSettings.gridEnabled ? 'bg-green-500 text-white' : 'hover:bg-gray-200'}`}
                  title="Toggle Grid (Ctrl+G)"
                >
                  <Grid3X3 size={18} />
                </button>
                <button
                  onClick={handleSnapToggle}
                  className={`p-2 rounded ${viewSettings.snapToGrid ? 'bg-green-500 text-white' : 'hover:bg-gray-200'}`}
                  title="Snap to Grid (Ctrl+Shift+G)"
                >
                  <Magnet size={18} />
                </button>
                <button
                  onClick={() => setViewSettings(prev => ({ ...prev, showLayers: !prev.showLayers }))}
                  className={`p-2 rounded ${viewSettings.showLayers ? 'bg-blue-500 text-white' : 'hover:bg-gray-200'}`}
                  title="Toggle Layers Panel"
                >
                  <Layers size={18} />
                </button>
              </div>
            </div>

            <div className="flex items-center space-x-2">
              {/* Right side controls */}
              <button
                onClick={() => setShowComponentLibrary(!showComponentLibrary)}
                className="p-2 hover:bg-gray-200 rounded"
                title="Toggle Component Library"
              >
                {showComponentLibrary ? <EyeOff size={18} /> : <Eye size={18} />}
              </button>
              
              <button
                onClick={() => setShowTemplateModal(true)}
                className="p-2 hover:bg-gray-200 rounded"
                title="Load Template"
              >
                <Upload size={18} />
              </button>
              
              <button
                onClick={() => setShowSettings(true)}
                className="p-2 hover:bg-gray-200 rounded"
                title="Settings"
              >
                <Settings size={18} />
              </button>
            </div>
          </div>
        </div>

        {/* Canvas Container */}
        <div ref={canvasRef} className="flex-1 relative overflow-hidden">
          <ProfessionalSLDCanvas
            diagram={state.diagram}
            onDiagramChange={(newDiagram) => dispatch({ type: 'SET_DIAGRAM', payload: newDiagram })}
            activeTool={activeTool}
            onComponentSelect={handleCanvasComponentSelect}
            onConnectionSelect={handleCanvasConnectionSelect}
            accessibilityMode={false}
            performanceMode="high"
          />
        </div>

        {/* Status Bar */}
        <div className="bg-white border-t border-gray-200 px-4 py-2">
          <div className="flex items-center justify-between text-sm text-gray-600">
            <div className="flex items-center space-x-4">
              <span>Grid: {viewSettings.gridPreset}</span>
              <span>Snap: {viewSettings.snapToGrid ? 'ON' : 'OFF'}</span>
              <span>Components: {state.diagram.components?.length || 0}</span>
              <span>Connections: {state.diagram.connections?.length || 0}</span>
            </div>
            <div className="flex items-center space-x-4">
              <span>Zoom: {Math.round(transform.zoom * 100)}%</span>
              <span>Position: {Math.round(transform.x)}, {Math.round(transform.y)}</span>
              {selectedElements.length > 0 && (
                <span>Selected: {selectedElements.length}</span>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Template Modal */}
      {showTemplateModal && (
        <SLDTemplateModal
          onClose={() => setShowTemplateModal(false)}
          onTemplateSelect={(template) => {
            // Handle template selection
            setShowTemplateModal(false);
          }}
        />
      )}
    </div>
  );
};

export default ProfessionalSLDMain;