import { describe, it, expect, beforeEach } from 'vitest';
import { SLDNECEngine } from '../../services/sldNECEngine';
import type { SLDDiagram, SLDComponent } from '../../types/sld';

describe('SLDNECEngine', () => {
  let mockDiagram: SLDDiagram;

  beforeEach(() => {
    mockDiagram = {
      id: 'test-diagram',
      projectId: 'test-project',
      name: 'Test Diagram',
      created: new Date(),
      lastModified: new Date(),
      version: '1.0',
      necCodeYear: '2023',
      systemType: 'grid_tied_with_battery',
      components: [
        {
          id: 'main-panel',
          type: 'main_panel',
          name: 'Main Service Panel',
          position: { x: 400, y: 200 },
          size: { width: 120, height: 80 },
          rotation: 0,
          labels: [],
          necLabels: ['WARNING: DISCONNECT ENERGIZED BY TWO SOURCES'],
          specifications: { rating: 200 }
        } as SLDComponent,
        {
          id: 'pv-array',
          type: 'pv_array',
          name: 'PV Array',
          position: { x: 100, y: 100 },
          size: { width: 100, height: 60 },
          rotation: 0,
          labels: [],
          necLabels: ['10kW PV ARRAY'],
          specifications: { power: 10000 }
        } as SLDComponent,
        {
          id: 'dc-disconnect',
          type: 'dc_disconnect',
          name: 'DC Disconnect',
          position: { x: 250, y: 100 },
          size: { width: 60, height: 40 },
          rotation: 0,
          labels: [],
          necLabels: ['PV SYSTEM DISCONNECT', 'MAX VOLTAGE: 600V DC'],
          specifications: { rating: '60A', voltage: 600 }
        } as SLDComponent,
        {
          id: 'inverter',
          type: 'inverter',
          name: 'Solar Inverter',
          position: { x: 350, y: 100 },
          size: { width: 80, height: 60 },
          rotation: 0,
          labels: [],
          necLabels: ['10kW INVERTER'],
          specifications: { acOutputKW: 10 }
        } as SLDComponent,
        {
          id: 'ac-disconnect',
          type: 'ac_disconnect',
          name: 'AC Disconnect',
          position: { x: 480, y: 100 },
          size: { width: 60, height: 40 },
          rotation: 0,
          labels: [],
          necLabels: ['AC DISCONNECT'],
          specifications: { rating: '60A', voltage: 240 }
        } as SLDComponent,
        {
          id: 'grounding',
          type: 'grounding_electrode',
          name: 'Grounding Electrode',
          position: { x: 400, y: 350 },
          size: { width: 40, height: 40 },
          rotation: 0,
          labels: [],
          necLabels: ['GROUNDING ELECTRODE'],
          specifications: { electrodeType: 'rod' }
        } as SLDComponent
      ],
      connections: [
        {
          id: 'conn1',
          fromComponentId: 'pv-array',
          toComponentId: 'dc-disconnect',
          fromPort: 'output',
          toPort: 'input',
          wireType: 'dc',
          voltage: 600,
          current: 17
        },
        {
          id: 'conn2',
          fromComponentId: 'dc-disconnect',
          toComponentId: 'inverter',
          fromPort: 'output',
          toPort: 'input',
          wireType: 'dc',
          voltage: 600,
          current: 17
        },
        {
          id: 'conn3',
          fromComponentId: 'inverter',
          toComponentId: 'ac-disconnect',
          fromPort: 'output',
          toPort: 'input',
          wireType: 'ac',
          voltage: 240,
          current: 42
        },
        {
          id: 'conn4',
          fromComponentId: 'ac-disconnect',
          toComponentId: 'main-panel',
          fromPort: 'output',
          toPort: 'input',
          wireType: 'ac',
          voltage: 240,
          current: 42
        },
        {
          id: 'conn5',
          fromComponentId: 'main-panel',
          toComponentId: 'grounding',
          fromPort: 'ground',
          toPort: 'input',
          wireType: 'ground'
        }
      ],
      labels: [],
      canvasSize: { width: 1200, height: 800 },
      backgroundColor: '#ffffff',
      gridEnabled: true,
      snapToGrid: true,
      autoGenerated: false,
      necCompliant: false,
      necViolations: [],
      requiredLabels: [],
      designedBy: 'Test Designer',
      ahj: 'Test AHJ'
    };
  });

  describe('validateDiagram', () => {
    it('should validate a compliant diagram', () => {
      const result = SLDNECEngine.validateDiagram(mockDiagram);
      
      expect(result).toBeDefined();
      expect(result.overallCompliant).toBe(true);
      expect(result.summary.errors).toBe(0);
      expect(result.validationResults).toBeDefined();
      expect(result.recommendations).toBeDefined();
    });

    it('should detect missing DC disconnect', () => {
      const noDCDisconnectDiagram = {
        ...mockDiagram,
        components: mockDiagram.components.filter(c => c.type !== 'dc_disconnect')
      };
      
      const result = SLDNECEngine.validateDiagram(noDCDisconnectDiagram);
      
      expect(result.overallCompliant).toBe(false);
      expect(result.summary.errors).toBeGreaterThan(0);
      expect(result.validationResults.some(v => 
        v.message.includes('DC disconnect') && v.severity === 'error'
      )).toBe(true);
    });

    it('should detect missing AC disconnect', () => {
      const noACDisconnectDiagram = {
        ...mockDiagram,
        components: mockDiagram.components.filter(c => c.type !== 'ac_disconnect')
      };
      
      const result = SLDNECEngine.validateDiagram(noACDisconnectDiagram);
      
      expect(result.overallCompliant).toBe(false);
      expect(result.summary.errors).toBeGreaterThan(0);
      expect(result.validationResults.some(v => 
        v.message.includes('AC disconnect') && v.severity === 'error'
      )).toBe(true);
    });

    it('should detect missing grounding electrode', () => {
      const noGroundingDiagram = {
        ...mockDiagram,
        components: mockDiagram.components.filter(c => c.type !== 'grounding_electrode')
      };
      
      const result = SLDNECEngine.validateDiagram(noGroundingDiagram);
      
      expect(result.overallCompliant).toBe(false);
      expect(result.summary.errors).toBeGreaterThan(0);
      expect(result.validationResults.some(v => 
        v.message.includes('grounding') && v.severity === 'error'
      )).toBe(true);
    });

    it('should detect missing required labels', () => {
      const noLabelsDiagram = {
        ...mockDiagram,
        components: mockDiagram.components.map(c => ({
          ...c,
          necLabels: []
        }))
      };
      
      const result = SLDNECEngine.validateDiagram(noLabelsDiagram);
      
      expect(result.overallCompliant).toBe(false);
      expect(result.summary.warnings).toBeGreaterThan(0);
      expect(result.validationResults.some(v => 
        v.message.includes('label') && v.severity === 'warning'
      )).toBe(true);
    });

    it('should validate wire sizing compliance', () => {
      // Add connection with insufficient wire size
      const undersizedWireDiagram = {
        ...mockDiagram,
        connections: mockDiagram.connections.map(conn => 
          conn.id === 'conn3' ? {
            ...conn,
            conductorSize: '14 AWG', // Undersized for 42A
            current: 50 // High current
          } : conn
        )
      };
      
      const result = SLDNECEngine.validateDiagram(undersizedWireDiagram);
      
      // Should detect wire sizing issues
      expect(result.validationResults.some(v => 
        v.message.includes('wire') || v.message.includes('conductor')
      )).toBe(true);
    });

    it('should check voltage drop compliance', () => {
      // Add connection with high voltage drop
      const highVoltageDrop = {
        ...mockDiagram,
        connections: mockDiagram.connections.map(conn => 
          conn.id === 'conn4' ? {
            ...conn,
            label: 'Long run - 500ft',
            voltageDropPercent: 4.5 // Above 3% limit
          } : conn
        )
      };
      
      const result = SLDNECEngine.validateDiagram(highVoltageDrop);
      
      // Should warn about voltage drop
      expect(result.validationResults.some(v => 
        v.message.includes('voltage drop')
      )).toBe(true);
    });

    it('should validate 120% rule for solar interconnection', () => {
      // Test solar interconnection sizing
      const oversizedSolarDiagram = {
        ...mockDiagram,
        components: mockDiagram.components.map(c => 
          c.type === 'main_panel' ? {
            ...c,
            specifications: { 
              ...c.specifications, 
              rating: 100, // Small panel
              busRating: 100 
            }
          } : c.type === 'inverter' ? {
            ...c,
            specifications: { 
              ...c.specifications, 
              acOutputKW: 15 // Large inverter for small panel
            }
          } : c
        )
      };
      
      const result = SLDNECEngine.validateDiagram(oversizedSolarDiagram);
      
      // Should detect 120% rule violation
      expect(result.validationResults.some(v => 
        v.message.includes('120%') || v.message.includes('bus rating')
      )).toBe(true);
    });

    it('should validate equipment spacing requirements', () => {
      // Test components that are too close together
      const crammedDiagram = {
        ...mockDiagram,
        components: mockDiagram.components.map((c, index) => ({
          ...c,
          position: { x: 100 + index * 10, y: 100 } // Very close spacing
        }))
      };
      
      const result = SLDNECEngine.validateDiagram(crammedDiagram);
      
      // May warn about spacing but shouldn't be an error
      expect(result.validationResults.some(v => 
        v.severity === 'warning'
      )).toBe(true);
    });
  });

  describe('autoFixViolations', () => {
    it('should auto-fix missing labels', () => {
      const noLabelsDiagram = {
        ...mockDiagram,
        components: mockDiagram.components.map(c => ({
          ...c,
          necLabels: []
        }))
      };
      
      const fixedDiagram = SLDNECEngine.autoFixViolations(noLabelsDiagram);
      
      // Should add required labels
      expect(fixedDiagram.components.some(c => c.necLabels.length > 0)).toBe(true);
      
      // Check for specific required labels
      const dcDisconnect = fixedDiagram.components.find(c => c.type === 'dc_disconnect');
      expect(dcDisconnect?.necLabels.some(label => 
        label.includes('PV SYSTEM DISCONNECT')
      )).toBe(true);
    });

    it('should auto-fix wire sizing violations', () => {
      const undersizedDiagram = {
        ...mockDiagram,
        connections: mockDiagram.connections.map(conn => ({
          ...conn,
          conductorSize: '14 AWG', // Undersized
          current: 30 // Requires larger wire
        }))
      };
      
      const fixedDiagram = SLDNECEngine.autoFixViolations(undersizedDiagram);
      
      // Should upgrade wire sizes
      expect(fixedDiagram.connections.some(conn => 
        conn.conductorSize && conn.conductorSize !== '14 AWG'
      )).toBe(true);
    });

    it('should add missing components when possible', () => {
      const incompleteSystem = {
        ...mockDiagram,
        components: [
          mockDiagram.components[0], // main panel
          mockDiagram.components[1]  // pv array
          // Missing disconnects and grounding
        ]
      };
      
      const fixedDiagram = SLDNECEngine.autoFixViolations(incompleteSystem);
      
      // Should add missing required components
      expect(fixedDiagram.components.length).toBeGreaterThan(incompleteSystem.components.length);
      
      // Should add grounding electrode
      expect(fixedDiagram.components.some(c => c.type === 'grounding_electrode')).toBe(true);
    });

    it('should fix component positioning violations', () => {
      const overlappingDiagram = {
        ...mockDiagram,
        components: mockDiagram.components.map(c => ({
          ...c,
          position: { x: 100, y: 100 } // All components at same position
        }))
      };
      
      const fixedDiagram = SLDNECEngine.autoFixViolations(overlappingDiagram);
      
      // Should separate overlapping components
      const positions = fixedDiagram.components.map(c => 
        `${c.position.x},${c.position.y}`
      );
      const uniquePositions = new Set(positions);
      expect(uniquePositions.size).toBeGreaterThan(1);
    });

    it('should preserve existing correct configurations', () => {
      const compliantDiagram = { ...mockDiagram };
      const fixedDiagram = SLDNECEngine.autoFixViolations(compliantDiagram);
      
      // Should not change already compliant diagram significantly
      expect(fixedDiagram.components.length).toBe(compliantDiagram.components.length);
      expect(fixedDiagram.connections.length).toBe(compliantDiagram.connections.length);
    });
  });

  describe('NEC Code Year Compliance', () => {
    it('should validate according to 2023 NEC', () => {
      const nec2023Diagram = {
        ...mockDiagram,
        necCodeYear: '2023' as const
      };
      
      const result = SLDNECEngine.validateDiagram(nec2023Diagram);
      
      expect(result).toBeDefined();
      expect(result.necCodeYear).toBe('2023');
    });

    it('should validate according to 2020 NEC', () => {
      const nec2020Diagram = {
        ...mockDiagram,
        necCodeYear: '2020' as const
      };
      
      const result = SLDNECEngine.validateDiagram(nec2020Diagram);
      
      expect(result).toBeDefined();
      expect(result.necCodeYear).toBe('2020');
    });

    it('should validate according to 2017 NEC', () => {
      const nec2017Diagram = {
        ...mockDiagram,
        necCodeYear: '2017' as const
      };
      
      const result = SLDNECEngine.validateDiagram(nec2017Diagram);
      
      expect(result).toBeDefined();
      expect(result.necCodeYear).toBe('2017');
    });
  });

  describe('Component-Specific Validation', () => {
    it('should validate EVSE installation requirements', () => {
      const evseComponent: SLDComponent = {
        id: 'evse1',
        type: 'evse_charger',
        name: 'EV Charger',
        position: { x: 300, y: 300 },
        size: { width: 80, height: 60 },
        rotation: 0,
        labels: [],
        necLabels: ['48A EV CHARGER'],
        specifications: { 
          current: 48, 
          voltage: 240, 
          level: 2,
          dedicatedCircuit: true 
        }
      } as any;
      
      const evseConnection = {
        id: 'evse-conn',
        fromComponentId: 'main-panel',
        toComponentId: 'evse1',
        fromPort: 'output',
        toPort: 'input',
        wireType: 'ac' as const,
        voltage: 240,
        current: 48
      };
      
      const evseDiagram = {
        ...mockDiagram,
        components: [...mockDiagram.components, evseComponent],
        connections: [...mockDiagram.connections, evseConnection]
      };
      
      const result = SLDNECEngine.validateDiagram(evseDiagram);
      
      // Should validate EVSE requirements (NEC 625)
      expect(result.validationResults.some(v => 
        v.componentId === 'evse1'
      )).toBeDefined();
    });

    it('should validate battery system requirements', () => {
      const batteryComponent: SLDComponent = {
        id: 'battery1',
        type: 'battery',
        name: 'Battery Storage',
        position: { x: 500, y: 200 },
        size: { width: 100, height: 80 },
        rotation: 0,
        labels: [],
        necLabels: ['13.5kWh BATTERY SYSTEM'],
        specifications: { 
          capacityKWh: 13.5, 
          powerKW: 7.2,
          voltage: 240,
          coupling: 'ac'
        }
      } as any;
      
      const batteryDiagram = {
        ...mockDiagram,
        components: [...mockDiagram.components, batteryComponent]
      };
      
      const result = SLDNECEngine.validateDiagram(batteryDiagram);
      
      // Should validate battery requirements (NEC 706)
      expect(result.validationResults).toBeDefined();
    });
  });

  describe('Recommendations Generation', () => {
    it('should generate helpful recommendations', () => {
      const result = SLDNECEngine.validateDiagram(mockDiagram);
      
      expect(result.recommendations).toBeDefined();
      expect(Array.isArray(result.recommendations)).toBe(true);
      
      // Should provide actionable recommendations
      result.recommendations.forEach(rec => {
        expect(typeof rec).toBe('string');
        expect(rec.length).toBeGreaterThan(10);
      });
    });

    it('should prioritize safety-related recommendations', () => {
      const unsafeDiagram = {
        ...mockDiagram,
        components: mockDiagram.components.filter(c => c.type !== 'grounding_electrode')
      };
      
      const result = SLDNECEngine.validateDiagram(unsafeDiagram);
      
      // Should prioritize grounding-related recommendations
      expect(result.recommendations.some(rec => 
        rec.toLowerCase().includes('ground')
      )).toBe(true);
    });
  });

  describe('Performance', () => {
    it('should validate large diagrams efficiently', () => {
      // Create large diagram with many components
      const largeComponents = Array.from({ length: 100 }, (_, i) => ({
        id: `comp${i}`,
        type: 'main_panel',
        name: `Component ${i}`,
        position: { x: (i % 10) * 100, y: Math.floor(i / 10) * 100 },
        size: { width: 80, height: 60 },
        rotation: 0,
        labels: [],
        necLabels: [],
        specifications: {}
      } as SLDComponent));
      
      const largeDiagram = {
        ...mockDiagram,
        components: largeComponents
      };
      
      const startTime = performance.now();
      const result = SLDNECEngine.validateDiagram(largeDiagram);
      const endTime = performance.now();
      
      expect(result).toBeDefined();
      expect(endTime - startTime).toBeLessThan(5000); // Should complete in under 5 seconds
    });
  });

  describe('Error Handling', () => {
    it('should handle malformed diagram gracefully', () => {
      const malformedDiagram = {
        ...mockDiagram,
        components: [
          {
            id: 'bad-component',
            type: 'unknown_type' as any,
            name: '',
            position: null as any,
            size: undefined as any,
            rotation: NaN,
            labels: null as any,
            necLabels: undefined as any,
            specifications: null as any
          }
        ]
      };
      
      expect(() => {
        const result = SLDNECEngine.validateDiagram(malformedDiagram);
        expect(result).toBeDefined();
      }).not.toThrow();
    });

    it('should handle empty diagram', () => {
      const emptyDiagram = {
        ...mockDiagram,
        components: [],
        connections: []
      };
      
      const result = SLDNECEngine.validateDiagram(emptyDiagram);
      
      expect(result).toBeDefined();
      expect(result.overallCompliant).toBe(false);
      expect(result.summary.errors).toBeGreaterThan(0);
    });

    it('should handle circular connections gracefully', () => {
      const circularDiagram = {
        ...mockDiagram,
        connections: [
          {
            id: 'circular1',
            fromComponentId: 'comp1',
            toComponentId: 'comp2',
            fromPort: 'output',
            toPort: 'input',
            wireType: 'ac' as const
          },
          {
            id: 'circular2',
            fromComponentId: 'comp2',
            toComponentId: 'comp1',
            fromPort: 'output',
            toPort: 'input',
            wireType: 'ac' as const
          }
        ]
      };
      
      const result = SLDNECEngine.validateDiagram(circularDiagram);
      
      expect(result).toBeDefined();
      // Should detect circular connection issue
      expect(result.validationResults.some(v => 
        v.message.includes('circular') || v.message.includes('loop')
      )).toBe(true);
    });
  });
});