# Fullstack Dockerfile - Runs both API server and frontend
FROM node:18-alpine

# Set working directory
WORKDIR /app

# Install dependencies for better compatibility
RUN apk add --no-cache libc6-compat curl

# Copy package files
COPY package.json package-lock.json* ./

# Install all dependencies
RUN npm ci

# Copy source code
COPY . .

# Create .env.local from example if it doesn't exist for fallback
RUN if [ ! -f .env.local ]; then cp .env.local.example .env.local; fi

# Runtime environment variables (will be injected at container startup)
# No build-time API keys to prevent exposure in image layers

# Set API base URL to local backend (no proxy needed in same container)
ENV API_BASE_URL=http://localhost:3001

# Default feature flags (can be overridden at runtime)
ENV USE_REAL_AERIAL_DATA=true
ENV AERIAL_PROVIDER=google

# Expose ports (3000 for frontend, 3001 for backend)
EXPOSE 3000 3001

# Set development environment
ENV NODE_ENV=development

# Enable polling for file watching in containers
ENV CHOKIDAR_USEPOLLING=true
ENV CHOKIDAR_INTERVAL=1000

# Vite specific environment variables for Docker
ENV VITE_HOST=0.0.0.0
ENV VITE_PORT=3000

# Health check for both services
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:3000/ && curl -f http://localhost:3001/api/health || exit 1

# Start both backend and frontend servers
CMD ["sh", "-c", "npx concurrently \"npm run server\" \"npm run dev\""]